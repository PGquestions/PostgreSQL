并行查询
2020年12月1日23:12:41
--创建测试表并插入500万条数据
postgres@test=>create table test_big1(id int4,name character varying(32),create_time timestamp without time zone default clock_timestamp());
CREATE TABLE

postgres@test=>insert into test_big1(id,name) select n,n||'_test' from generate_series(1,5000000) n;
INSERT 0 5000000
postgres@test=>explain select * from test_big1 where name = '1_test';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Gather  (cost=1000.00..62821.86 rows=1 width=24)
   Workers Planned: 2
   ->  Parallel Seq Scan on test_big1  (cost=0.00..61821.76 rows=1 width=24)
         Filter: ((name)::text = '1_test'::text)
(4 rows)

postgres@test=>explain analyze select * from test_big1 where name = '1_test';
                                                        QUERY PLAN              
                                           
--------------------------------------------------------------------------------
-------------------------------------------
 Gather  (cost=1000.00..62821.86 rows=1 width=24) (actual time=0.225..448.420 ro
ws=1 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   ->  Parallel Seq Scan on test_big1  (cost=0.00..61821.76 rows=1 width=24) (ac
tual time=288.776..436.820 rows=0 loops=3)
         Filter: ((name)::text = '1_test'::text)
         Rows Removed by Filter: 1666666
 Planning Time: 0.054 ms
 Execution Time: 448.434 ms
(8 rows)
--Workers Planned：执行计划预估的并行进程数
--Workers Launched：查询实际获取的并行进程数
--Execution Time：执行时间

--当前会话关闭并行
postgres@test=>set max_parallel_workers_per_gather = 0;
SET
postgres@test=>explain analyze select * from test_big1 where name = '1_test';
                                                QUERY PLAN                      
                           
--------------------------------------------------------------------------------
---------------------------
 Seq Scan on test_big1  (cost=0.00..105997.85 rows=1 width=23) (actual time=0.01
3..665.182 rows=1 loops=1)
   Filter: ((name)::text = '1_test'::text)
   Rows Removed by Filter: 4999999	
 Planning Time: 0.041 ms
 Execution Time: 665.198 ms
(5 rows)
--并行查询比非并行查询效率的1.5倍。


--并行索引扫描
postgres@test=>create index idx_t on test_big1 using btree(id);
CREATE INDEX
postgres@test=>explain analyze select count(name) from test_big1 where id<1000000;
                                                                         QUERY PLAN                                                  
                        
-------------------------------------------------------------------------------------------------------------------------------------
------------------------
 Finalize Aggregate  (cost=31604.27..31604.28 rows=1 width=8) (actual time=289.412..289.413 rows=1 loops=1)
   ->  Gather  (cost=31604.05..31604.26 rows=2 width=8) (actual time=289.400..292.094 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=30604.05..30604.06 rows=1 width=8) (actual time=282.865..282.866 rows=1 loops=3)
               ->  Parallel Index Scan using idx_t on test_big1  (cost=0.43..29570.39 rows=413463 width=12) (actual time=0.031..178.2
14 rows=333333 loops=3)
                     Index Cond: (id < 1000000)
 Planning Time: 0.116 ms
 Execution Time: 292.137 ms
(9 rows)

postgres@test=>set max_parallel_workers_per_gather = 0;
SET
postgres@test=>explain analyze select count(name) from test_big1 where id<1000000;
                                                               QUERY PLAN                                                            
   
-------------------------------------------------------------------------------------------------------------------------------------
---
 Aggregate  (cost=37839.65..37839.66 rows=1 width=8) (actual time=348.772..348.772 rows=1 loops=1)
   ->  Index Scan using idx_t on test_big1  (cost=0.43..35358.88 rows=992311 width=12) (actual time=0.014..216.417 rows=999999 loops=
1)
         Index Cond: (id < 1000000)
 Planning Time: 0.048 ms
 Execution Time: 348.799 ms
(5 rows)


postgres@test=>explain analyze select count(id) from test_big1 where id<1000000;
                                                                           QUERY PLAN                                                
                            
-------------------------------------------------------------------------------------------------------------------------------------
----------------------------
 Finalize Aggregate  (cost=31604.27..31604.28 rows=1 width=8) (actual time=287.363..287.363 rows=1 loops=1)
   ->  Gather  (cost=31604.05..31604.26 rows=2 width=8) (actual time=286.932..289.134 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=30604.05..30604.06 rows=1 width=8) (actual time=280.128..280.128 rows=1 loops=3)
               ->  Parallel Index Only Scan using idx_t on test_big1  (cost=0.43..29570.39 rows=413463 width=4) (actual time=0.041..2
19.802 rows=333333 loops=3)
                     Index Cond: (id < 1000000)
                     Heap Fetches: 999999
 Planning Time: 0.263 ms
 Execution Time: 289.200 ms
(10 rows)
